// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

public type GenerateRequest record {
    # The model name in `model:tag` format (e.g., `llama3:70b`). Tag defaults to `latest` if omitted.
    string model;
    # The prompt to generate a response for.
    string prompt?;
    # Text to append after the model response.
    string suffix?;
    # List of base64-encoded images (for multimodal models like `llava`).
    string[] images?;
    # Format for the response. Can be `"json"` for JSON mode or a JSON schema for structured outputs.
    "json"|record {} format?;
    GenerateOptions options?;
    # System message to override the Modelfile definition.
    string system?;
    # Prompt template to override the Modelfile definition.
    string template?;
    # If `false`, returns a single response object instead of a stream. Defaults to `true`.
    boolean 'stream = true;
    # If `true`, no formatting is applied to the prompt. No context is returned in this mode.
    boolean raw = false;
    # Duration the model stays loaded in memory after the request (e.g., `5m`). In nanoseconds if numeric.
    string keep_alive = "5m";
    # Context from a previous request for conversational memory (deprecated).
    # 
    # # Deprecated
    @deprecated
    int[] context?;
};

# A single object in the stream of responses when `stream` is `true`.
public type GenerateStreamResponse record {
    # The model name used for generation.
    string model;
    # Timestamp of response creation.
    string created_at;
    # Partial or empty response text. Empty in the final stream object.
    string response;
    # Indicates if this is the final response in the stream.
    boolean done;
    # Conversational context encoding (only in final response if not in raw mode).
    int[] context?;
    # Total time spent generating the response in nanoseconds (final response only).
    int total_duration?;
    # Time spent loading the model in nanoseconds (final response only).
    int load_duration?;
    # Number of tokens in the prompt (final response only).
    int prompt_eval_count?;
    # Time spent evaluating the prompt in nanoseconds (final response only).
    int prompt_eval_duration?;
    # Number of tokens in the response (final response only).
    int eval_count?;
    # Time spent generating the response in nanoseconds (final response only).
    int eval_duration?;
};

# Response when `stream` is `false`.
public type GenerateSingleResponse record {
    # The model name used for generation.
    string model;
    # Timestamp of response creation.
    string created_at;
    # The complete generated response.
    string response;
    # Always `true` for a single response.
    boolean done;
    # Reason for completion (e.g., "stop").
    string done_reason?;
    # Conversational context encoding (not returned in raw mode).
    int[] context?;
    # Total time spent generating the response in nanoseconds.
    int total_duration?;
    # Time spent loading the model in nanoseconds.
    int load_duration?;
    # Number of tokens in the prompt.
    int prompt_eval_count?;
    # Time spent evaluating the prompt in nanoseconds.
    int prompt_eval_duration?;
    # Number of tokens in the response.
    int eval_count?;
    # Time spent generating the response in nanoseconds.
    int eval_duration?;
};

# Provides settings related to HTTP/1.x protocol.
public type ClientHttp1Settings record {|
    # Specifies whether to reuse a connection for multiple requests
    http:KeepAlive keepAlive = http:KEEPALIVE_AUTO;
    # The chunking behaviour of the request
    http:Chunking chunking = http:CHUNKING_AUTO;
    # Proxy server related options
    ProxyConfig proxy?;
|};

# Additional model parameters.
public type GenerateOptions record {
    # Number of tokens to keep.
    int num_keep?;
    # Seed for reproducible outputs.
    int seed?;
    # Maximum number of tokens to predict.
    int num_predict?;
    # Top-k sampling parameter.
    int top_k?;
    # Top-p (nucleus) sampling parameter.
    decimal top_p?;
    # Minimum probability threshold.
    decimal min_p?;
    # Typical probability parameter.
    decimal typical_p?;
    # Number of last tokens to consider for repetition penalty.
    int repeat_last_n?;
    # Sampling temperature.
    decimal temperature?;
    # Penalty for repeated tokens.
    decimal repeat_penalty?;
    # Penalty for presence of certain tokens.
    decimal presence_penalty?;
    # Penalty based on token frequency.
    decimal frequency_penalty?;
    # Mirostat sampling mode.
    int mirostat?;
    # Mirostat tau parameter.
    decimal mirostat_tau?;
    # Mirostat eta parameter.
    decimal mirostat_eta?;
    # Whether to penalize newlines.
    boolean penalize_newline?;
    # List of stop sequences.
    string[] stop?;
    # Enable NUMA optimizations.
    boolean numa?;
    # Context window size.
    int num_ctx?;
    # Batch size for processing.
    int num_batch?;
    # Number of GPUs to use.
    int num_gpu?;
    # Main GPU index.
    int main_gpu?;
    # Optimize for low VRAM usage.
    boolean low_vram?;
    # Load only the vocabulary.
    boolean vocab_only?;
    # Use memory-mapped files.
    boolean use_mmap?;
    # Lock memory to prevent swapping.
    boolean use_mlock?;
    # Number of threads to use.
    int num_thread?;
};

# Proxy server configurations to be used with the HTTP client endpoint.
public type ProxyConfig record {|
    # Host name of the proxy server
    string host = "";
    # Proxy server port
    int port = 0;
    # Proxy server username
    string userName = "";
    # Proxy server password
    @display {label: "", kind: "password"}
    string password = "";
|};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    ClientHttp1Settings http1Settings?;
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings?;
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 60;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache?;
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits?;
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};
